
@page "/contacts/edit/{id:int}"
@page "/contacts/new"
@inject HttpClient Http
@inject NavigationManager NavigationManager



@if(Id != null)
{
    <h3>Edit @contact.NickName</h3>
}
else
{
    <h3>Create a new contact</h3>
}

<div>
    <EditForm Model="contact" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <SfTextBox CssClass="e-outline" Placeholder="First Name"
                    FloatLabelType="@FloatLabelType.Auto" @bind-value="@contact.FirstName"/>
        <SfTextBox CssClass="e-outline" Placeholder="Last Name"
                   FloatLabelType="@FloatLabelType.Auto" @bind-value="@contact.LastName" />
        <SfTextBox CssClass="e-outline" Placeholder="Nick Name"
                   FloatLabelType="@FloatLabelType.Auto" @bind-value="@contact.NickName" />
                   <ValidationMessage For="(() => contact.NickName)"/>
        <SfTextBox CssClass="e-outline" Placeholder="Place"
                   FloatLabelType="@FloatLabelType.Auto" @bind-value="@contact.Place"/>
        <SfDatePicker TValue="DateTime?" Placeholder="Date Of Birth" FloatLabelType="@FloatLabelType.Auto"
                      @bind-Value="contact.DateOfBirth" Format="yyyy-MM-dd"/> 
         <hr />
         <SfButton CssClass="e-primary" IconCss="e-icons e-save" Content="Save" type="submit"/>
    </EditForm>
</div>

@code {

    [Parameter]

    public int Id { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetAsync($"api/contacts/{Id}");     
        if(result != null)
        {
            var jsonResult = await result.Content.ReadFromJsonAsync<Contact>();
            if (jsonResult != null)
            {
                contact = jsonResult;
            }
            else
            {
                NavigationManager.NavigateTo("contacts/new");
            }
        }
    }


    public Contact contact { get; set; } = new Contact();

    async Task HandleSubmit()
    {
    }
}
